(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{444:function(t,e,a){"use strict";a.r(e);var l=a(26),n=Object(l.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("p",[t._v("MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：")]),t._v(" "),a("ul",[a("li",[t._v("configuration（配置）\n"),a("ul",[a("li",[t._v("properties（属性）")]),t._v(" "),a("li",[t._v("settings（设置）")]),t._v(" "),a("li",[t._v("typeAliases（类型别名）")]),t._v(" "),a("li",[t._v("typeHandlers（类型处理器）")]),t._v(" "),a("li",[t._v("objectFactory（对象工厂）")]),t._v(" "),a("li",[t._v("plugins（插件）")]),t._v(" "),a("li",[t._v("environments（环境配置）\n"),a("ul",[a("li",[t._v("environment（环境变量）\n"),a("ul",[a("li",[t._v("transactionManager（事务管理器）")]),t._v(" "),a("li",[t._v("dataSource（数据源）")])])])])]),t._v(" "),a("li",[t._v("databaseIdProvider（数据库厂商标识）")]),t._v(" "),a("li",[t._v("mappers（映射器）")])])])]),t._v(" "),a("h3",{attrs:{id:"属性（properties）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性（properties）"}},[t._v("#")]),t._v(" 属性（properties）")]),t._v(" "),a("p",[t._v("这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<properties resource="org/mybatis/example/config.properties">\n  <property name="username" value="dev_user"/>\n  <property name="password" value="F2Fa3!33TYyg"/>\n</properties>\n')])])]),a("p",[t._v("然后其中的属性就可以在整个配置文件中被用来替换需要动态配置的属性值。比如:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<dataSource type="POOLED">\n  <property name="driver" value="${driver}"/>\n  <property name="url" value="${url}"/>\n  <property name="username" value="${username}"/>\n  <property name="password" value="${password}"/>\n</dataSource>\n')])])]),a("p",[t._v("这个例子中的 username 和 password 将会由 properties 元素中设置的相应值来替换。 driver 和 url 属性将会由 config.properties 文件中对应的值来替换。这样就为配置提供了诸多灵活选择。")]),t._v(" "),a("p",[t._v("属性也可以被传递到 SqlSessionFactoryBuilder.build()方法中。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);\n\n// ... 或者 ...\n\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);\n")])])]),a("p",[t._v("如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：")]),t._v(" "),a("ul",[a("li",[t._v("在 properties 元素体内指定的属性首先被读取。")]),t._v(" "),a("li",[t._v("然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。")]),t._v(" "),a("li",[t._v("最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。")])]),t._v(" "),a("p",[t._v("因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。")]),t._v(" "),a("p",[t._v("从 MyBatis 3.4.2 开始，你可以为占位符指定一个默认值。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<dataSource type=\"POOLED\">\n  \x3c!-- ... --\x3e\n  <property name=\"username\" value=\"${username:ut_user}\"/> \x3c!-- 如果属性 'username' 没有被配置，'username' 属性的值将为 'ut_user' --\x3e\n</dataSource>\n")])])]),a("p",[t._v("这个特性默认是关闭的。如果你想为占位符指定一个默认值， 你应该添加一个指定的属性来开启这个特性。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<properties resource="org/mybatis/example/config.properties">\n  \x3c!-- ... --\x3e\n  <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/> \x3c!-- 启用默认值特性 --\x3e\n</properties>\n')])])]),a("p",[a("strong",[t._v("提示")]),t._v(" 如果你已经使用 "),a("code",[t._v('":"')]),t._v(" 作为属性的键（如："),a("code",[t._v("db:username")]),t._v("） ，或者你已经在 SQL 定义中使用 OGNL 表达式的三元运算符（如： "),a("code",[t._v("${tableName != null ? tableName : 'global_constants'}")]),t._v("），你应该通过设置特定的属性来修改分隔键名和默认值的字符。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<properties resource="org/mybatis/example/config.properties">\n  \x3c!-- ... --\x3e\n  <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/> \x3c!-- 修改默认值的分隔符 --\x3e\n</properties>\n<dataSource type="POOLED">\n  \x3c!-- ... --\x3e\n  <property name="username" value="${db:username?:ut_user}"/>\n</dataSource>\n')])])]),a("h3",{attrs:{id:"设置（settings）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置（settings）"}},[t._v("#")]),t._v(" 设置（settings）")]),t._v(" "),a("p",[t._v("这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项的意图、默认值等。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("设置名")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("有效值")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("cacheEnabled")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("lazyLoadingEnabled")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 "),a("code",[t._v("fetchType")]),t._v(" 属性来覆盖该项的开关状态。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("false")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("aggressiveLazyLoading")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 "),a("code",[t._v("lazyLoadTriggerMethods")]),t._v(")。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("false （在 3.4.1 及之前的版本默认值为 true）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("multipleResultSetsEnabled")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是否允许单一语句返回多结果集（需要驱动支持）。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("useColumnLabel")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("useGeneratedKeys")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("False")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("autoMappingBehavior")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NONE, PARTIAL, FULL")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("PARTIAL")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("autoMappingUnknownColumnBehavior")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定发现自动映射目标未知列（或者未知属性类型）的行为。"),a("code",[t._v("NONE")]),t._v(": 不做任何反应"),a("code",[t._v("WARNING")]),t._v(": 输出提醒日志 ("),a("code",[t._v("'org.apache.ibatis.session.AutoMappingUnknownColumnBehavior'")]),t._v(" 的日志等级必须设置为 "),a("code",[t._v("WARN")]),t._v(")"),a("code",[t._v("FAILING")]),t._v(": 映射失败 (抛出 "),a("code",[t._v("SqlSessionException")]),t._v(")")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NONE, WARNING, FAILING")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NONE")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("defaultExecutorType")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("SIMPLE REUSE BATCH")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("SIMPLE")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("defaultStatementTimeout")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("设置超时时间，它决定驱动等待数据库响应的秒数。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("任意正整数")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("未设置 (null)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("defaultFetchSize")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("任意正整数")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("未设置 (null)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("defaultResultSetType")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Specifies a scroll strategy when omit it per statement settings. (Since: 3.5.2)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT(same behavior with 'Not Set')")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Not Set (null)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("safeRowBoundsEnabled")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("False")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("safeResultHandlerEnabled")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("True")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("mapUnderscoreToCamelCase")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("False")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("localCacheScope")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("SESSION | STATEMENT")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("SESSION")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("jdbcTypeForNull")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JdbcType 常量，常用值：NULL, VARCHAR 或 OTHER。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("OTHER")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("lazyLoadTriggerMethods")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定哪个对象的方法触发一次延迟加载。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("用逗号分隔的方法列表。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("equals,clone,hashCode,toString")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("defaultScriptingLanguage")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定动态 SQL 生成的默认语言。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("一个类型别名或完全限定类名。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("org.apache.ibatis.scripting.xmltags.XMLLanguageDriver")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("defaultEnumTypeHandler")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定 Enum 使用的默认 "),a("code",[t._v("TypeHandler")]),t._v(" 。（新增于 3.4.5）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("一个类型别名或完全限定类名。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("org.apache.ibatis.type.EnumTypeHandler")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("callSettersOnNulls")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("false")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("returnInstanceForEmptyRow")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("当返回行的所有列都是空时，MyBatis默认返回 "),a("code",[t._v("null")]),t._v("。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("false")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("logPrefix")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定 MyBatis 增加到日志名称的前缀。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("任何字符串")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("未设置")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("logImpl")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定 MyBatis 所用日志的具体实现，未指定时将自动查找。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("未设置")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("proxyFactory")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CGLIB | JAVASSIST")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JAVASSIST （MyBatis 3.3 以上）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("vfsImpl")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定 VFS 的实现")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("自定义 VFS 的实现的类全限定名，以逗号分隔。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("未设置")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("useActualParamName")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 "),a("code",[t._v("-parameters")]),t._v(" 选项。（新增于 3.4.1）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true | false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("configurationFactory")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定一个提供 "),a("code",[t._v("Configuration")]),t._v(" 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为"),a("code",[t._v("static Configuration getConfiguration()")]),t._v(" 的方法。（新增于 3.2.3）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("类型别名或者全类名.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("未设置")])])])]),t._v(" "),a("p",[t._v("一个配置完整的 settings 元素的示例如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<settings>\n  <setting name="cacheEnabled" value="true"/>\n  <setting name="lazyLoadingEnabled" value="true"/>\n  <setting name="multipleResultSetsEnabled" value="true"/>\n  <setting name="useColumnLabel" value="true"/>\n  <setting name="useGeneratedKeys" value="false"/>\n  <setting name="autoMappingBehavior" value="PARTIAL"/>\n  <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>\n  <setting name="defaultExecutorType" value="SIMPLE"/>\n  <setting name="defaultStatementTimeout" value="25"/>\n  <setting name="defaultFetchSize" value="100"/>\n  <setting name="safeRowBoundsEnabled" value="false"/>\n  <setting name="mapUnderscoreToCamelCase" value="false"/>\n  <setting name="localCacheScope" value="SESSION"/>\n  <setting name="jdbcTypeForNull" value="OTHER"/>\n  <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>\n</settings>\n')])])]),a("h3",{attrs:{id:"类型别名（typealiases）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型别名（typealiases）"}},[t._v("#")]),t._v(" 类型别名（typeAliases）")]),t._v(" "),a("p",[t._v("类型别名是为 Java 类型设置一个短的名字。 它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<typeAliases>\n  <typeAlias alias="Author" type="domain.blog.Author"/>\n  <typeAlias alias="Blog" type="domain.blog.Blog"/>\n  <typeAlias alias="Comment" type="domain.blog.Comment"/>\n  <typeAlias alias="Post" type="domain.blog.Post"/>\n  <typeAlias alias="Section" type="domain.blog.Section"/>\n  <typeAlias alias="Tag" type="domain.blog.Tag"/>\n</typeAliases>\n')])])]),a("p",[t._v("当这样配置时，"),a("code",[t._v("Blog")]),t._v(" 可以用在任何使用 "),a("code",[t._v("domain.blog.Blog")]),t._v(" 的地方。")]),t._v(" "),a("p",[t._v("也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<typeAliases>\n  <package name="domain.blog"/>\n</typeAliases>\n')])])]),a("p",[t._v("每一个在包 "),a("code",[t._v("domain.blog")]),t._v(" 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 "),a("code",[t._v("domain.blog.Author")]),t._v(" 的别名为 "),a("code",[t._v("author")]),t._v("；若有注解，则别名为其注解值。见下面的例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Alias("author")\npublic class Author {\n    ...\n}\n')])])]),a("p",[t._v("这是一些为常见的 Java 类型内建的相应的类型别名。它们都是不区分大小写的，注意对基本类型名称重复采取的特殊命名风格。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("别名")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("映射的类型")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("_byte")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("byte")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("_long")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("long")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("_short")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("short")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("_int")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("int")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("_integer")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("int")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("_double")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("double")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("_float")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("float")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("_boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("String")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("byte")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Byte")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Long")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("short")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Short")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Integer")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("integer")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Integer")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("double")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Double")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Float")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("date")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Date")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("decimal")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("BigDecimal")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("bigdecimal")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("BigDecimal")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("object")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Object")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("map")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Map")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("hashmap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("list")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("List")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("arraylist")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("ArrayList")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("collection")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Collection")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("iterator")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Iterator")])])])]),t._v(" "),a("h3",{attrs:{id:"类型处理器（typehandlers）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型处理器（typehandlers）"}},[t._v("#")]),t._v(" 类型处理器（typeHandlers）")]),t._v(" "),a("p",[t._v("无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。")]),t._v(" "),a("p",[a("strong",[t._v("提示")]),t._v(" 从 3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） 。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("类型处理器")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Java 类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("JDBC 类型")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("BooleanTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.Boolean")]),t._v(", "),a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据库兼容的 "),a("code",[t._v("BOOLEAN")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ByteTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.Byte")]),t._v(", "),a("code",[t._v("byte")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据库兼容的 "),a("code",[t._v("NUMERIC")]),t._v(" 或 "),a("code",[t._v("BYTE")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ShortTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.Short")]),t._v(", "),a("code",[t._v("short")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据库兼容的 "),a("code",[t._v("NUMERIC")]),t._v(" 或 "),a("code",[t._v("SMALLINT")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("IntegerTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.Integer")]),t._v(", "),a("code",[t._v("int")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据库兼容的 "),a("code",[t._v("NUMERIC")]),t._v(" 或 "),a("code",[t._v("INTEGER")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("LongTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.Long")]),t._v(", "),a("code",[t._v("long")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据库兼容的 "),a("code",[t._v("NUMERIC")]),t._v(" 或 "),a("code",[t._v("BIGINT")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("FloatTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.Float")]),t._v(", "),a("code",[t._v("float")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据库兼容的 "),a("code",[t._v("NUMERIC")]),t._v(" 或 "),a("code",[t._v("FLOAT")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("DoubleTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.Double")]),t._v(", "),a("code",[t._v("double")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据库兼容的 "),a("code",[t._v("NUMERIC")]),t._v(" 或 "),a("code",[t._v("DOUBLE")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("BigDecimalTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.math.BigDecimal")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据库兼容的 "),a("code",[t._v("NUMERIC")]),t._v(" 或 "),a("code",[t._v("DECIMAL")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("StringTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.String")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("CHAR")]),t._v(", "),a("code",[t._v("VARCHAR")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ClobReaderTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.io.Reader")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ClobTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.String")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("CLOB")]),t._v(", "),a("code",[t._v("LONGVARCHAR")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("NStringTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.String")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("NVARCHAR")]),t._v(", "),a("code",[t._v("NCHAR")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("NClobTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.String")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("NCLOB")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("BlobInputStreamTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.io.InputStream")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ByteArrayTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("byte[]")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据库兼容的字节流类型")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("BlobTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("byte[]")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("BLOB")]),t._v(", "),a("code",[t._v("LONGVARBINARY")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("DateTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.util.Date")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TIMESTAMP")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("DateOnlyTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.util.Date")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("DATE")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TimeOnlyTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.util.Date")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TIME")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("SqlTimestampTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.sql.Timestamp")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TIMESTAMP")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("SqlDateTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.sql.Date")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("DATE")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("SqlTimeTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.sql.Time")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TIME")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ObjectTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Any")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("OTHER")]),t._v(" 或未指定类型")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("EnumTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Enumeration Type")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("VARCHAR 或任何兼容的字符串类型，用以存储枚举的名称（而不是索引值）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("EnumOrdinalTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Enumeration Type")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("任何兼容的 "),a("code",[t._v("NUMERIC")]),t._v(" 或 "),a("code",[t._v("DOUBLE")]),t._v(" 类型，存储枚举的序数值（而不是名称）。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("SqlxmlTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.lang.String")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("SQLXML")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("InstantTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.Instant")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TIMESTAMP")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("LocalDateTimeTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.LocalDateTime")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TIMESTAMP")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("LocalDateTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.LocalDate")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("DATE")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("LocalTimeTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.LocalTime")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TIME")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("OffsetDateTimeTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.OffsetDateTime")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TIMESTAMP")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("OffsetTimeTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.OffsetTime")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TIME")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ZonedDateTimeTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.ZonedDateTime")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("TIMESTAMP")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("YearTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.Year")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("INTEGER")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("MonthTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.Month")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("INTEGER")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("YearMonthTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.YearMonth")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("VARCHAR")]),t._v(" 或 "),a("code",[t._v("LONGVARCHAR")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("JapaneseDateTypeHandler")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("java.time.chrono.JapaneseDate")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("DATE")])])])])]),t._v(" "),a("p",[t._v("你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。 具体做法为：实现 "),a("code",[t._v("org.apache.ibatis.type.TypeHandler")]),t._v(" 接口， 或继承一个很便利的类 "),a("code",[t._v("org.apache.ibatis.type.BaseTypeHandler")]),t._v("， 然后可以选择性地将它映射到一个 JDBC 类型。比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// ExampleTypeHandler.java\n@MappedJdbcTypes(JdbcType.VARCHAR)\npublic class ExampleTypeHandler extends BaseTypeHandler<String> {\n\n  @Override\n  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {\n    ps.setString(i, parameter);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, String columnName) throws SQLException {\n    return rs.getString(columnName);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n    return rs.getString(columnIndex);\n  }\n\n  @Override\n  public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n    return cs.getString(columnIndex);\n  }\n}\n\x3c!-- mybatis-config.xml --\x3e\n<typeHandlers>\n  <typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>\n</typeHandlers>\n')])])]),a("p",[t._v("使用上述的类型处理器将会覆盖已经存在的处理 Java 的 String 类型属性和 VARCHAR 参数及结果的类型处理器。 要注意 MyBatis 不会通过窥探数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明那是 VARCHAR 类型的字段， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。")]),t._v(" "),a("p",[t._v("通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：")]),t._v(" "),a("ul",[a("li",[t._v("在类型处理器的配置元素（typeHandler 元素）上增加一个 "),a("code",[t._v("javaType")]),t._v(" 属性（比如："),a("code",[t._v('javaType="String"')]),t._v("）；")]),t._v(" "),a("li",[t._v("在类型处理器的类上（TypeHandler class）增加一个 "),a("code",[t._v("@MappedTypes")]),t._v(" 注解来指定与其关联的 Java 类型列表。 如果在 "),a("code",[t._v("javaType")]),t._v(" 属性中也同时指定，则注解方式将被忽略。")])]),t._v(" "),a("p",[t._v("可以通过两种方式来指定被关联的 JDBC 类型：")]),t._v(" "),a("ul",[a("li",[t._v("在类型处理器的配置元素上增加一个 "),a("code",[t._v("jdbcType")]),t._v(" 属性（比如："),a("code",[t._v('jdbcType="VARCHAR"')]),t._v("）；")]),t._v(" "),a("li",[t._v("在类型处理器的类上增加一个 "),a("code",[t._v("@MappedJdbcTypes")]),t._v(" 注解来指定与其关联的 JDBC 类型列表。 如果在 "),a("code",[t._v("jdbcType")]),t._v(" 属性中也同时指定，则注解方式将被忽略。")])]),t._v(" "),a("p",[t._v("当在 "),a("code",[t._v("ResultMap")]),t._v(" 中决定使用哪种类型处理器时，此时 Java 类型是已知的（从结果类型中获得），但是 JDBC 类型是未知的。 因此 Mybatis 使用 "),a("code",[t._v("javaType=[Java 类型], jdbcType=null")]),t._v(" 的组合来选择一个类型处理器。 这意味着使用 "),a("code",[t._v("@MappedJdbcTypes")]),t._v(" 注解可以"),a("em",[t._v("限制")]),t._v("类型处理器的范围，同时除非显式的设置，否则类型处理器在 "),a("code",[t._v("ResultMap")]),t._v(" 中将是无效的。 如果希望在 "),a("code",[t._v("ResultMap")]),t._v(" 中使用类型处理器，那么设置 "),a("code",[t._v("@MappedJdbcTypes")]),t._v(" 注解的 "),a("code",[t._v("includeNullJdbcType=true")]),t._v(" 即可。 然而从 Mybatis 3.4.0 开始，如果"),a("strong",[t._v("只有一个")]),t._v("注册的类型处理器来处理 Java 类型，那么它将是 "),a("code",[t._v("ResultMap")]),t._v(" 使用 Java 类型时的默认值（即使没有 "),a("code",[t._v("includeNullJdbcType=true")]),t._v("）。")]),t._v(" "),a("p",[t._v("最后，可以让 MyBatis 为你查找类型处理器：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\x3c!-- mybatis-config.xml --\x3e\n<typeHandlers>\n  <package name="org.mybatis.example"/>\n</typeHandlers>\n')])])]),a("p",[t._v("注意在使用自动发现功能的时候，只能通过注解方式来指定 JDBC 的类型。")]),t._v(" "),a("p",[t._v("你可以创建一个能够处理多个类的泛型类型处理器。为了使用泛型类型处理器， 需要增加一个接受该类的 class 作为参数的构造器，这样在构造一个类型处理器的时候 MyBatis 就会传入一个具体的类。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//GenericTypeHandler.java\npublic class GenericTypeHandler<E extends MyObject> extends BaseTypeHandler<E> {\n\n  private Class<E> type;\n\n  public GenericTypeHandler(Class<E> type) {\n    if (type == null) throw new IllegalArgumentException("Type argument cannot be null");\n    this.type = type;\n  }\n  ...\n')])])]),a("p",[a("code",[t._v("EnumTypeHandler")]),t._v(" 和 "),a("code",[t._v("EnumOrdinalTypeHandler")]),t._v(" 都是泛型类型处理器，我们将会在接下来的部分详细探讨。")]),t._v(" "),a("h3",{attrs:{id:"处理枚举类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理枚举类型"}},[t._v("#")]),t._v(" 处理枚举类型")]),t._v(" "),a("p",[t._v("若想映射枚举类型 "),a("code",[t._v("Enum")]),t._v("，则需要从 "),a("code",[t._v("EnumTypeHandler")]),t._v(" 或者 "),a("code",[t._v("EnumOrdinalTypeHandler")]),t._v(" 中选一个来使用。")]),t._v(" "),a("p",[t._v("比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用 "),a("code",[t._v("EnumTypeHandler")]),t._v(" 来把 "),a("code",[t._v("Enum")]),t._v(" 值转换成对应的名字。")]),t._v(" "),a("p",[a("strong",[t._v("注意 "),a("code",[t._v("EnumTypeHandler")]),t._v(" 在某种意义上来说是比较特别的，其他的处理器只针对某个特定的类，而它不同，它会处理任意继承了 "),a("code",[t._v("Enum")]),t._v(" 的类。")])]),t._v(" "),a("p",[t._v("不过，我们可能不想存储名字，相反我们的 DBA 会坚持使用整形值代码。那也一样轻而易举： 在配置文件中把 "),a("code",[t._v("EnumOrdinalTypeHandler")]),t._v(" 加到 "),a("code",[t._v("typeHandlers")]),t._v(" 中即可， 这样每个 "),a("code",[t._v("RoundingMode")]),t._v(" 将通过他们的序数值来映射成对应的整形数值。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\x3c!-- mybatis-config.xml --\x3e\n<typeHandlers>\n  <typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="java.math.RoundingMode"/>\n</typeHandlers>\n')])])]),a("p",[t._v("但是怎样能将同样的 "),a("code",[t._v("Enum")]),t._v(" 既映射成字符串又映射成整形呢？")]),t._v(" "),a("p",[t._v("自动映射器（auto-mapper）会自动地选用 "),a("code",[t._v("EnumOrdinalTypeHandler")]),t._v(" 来处理， 所以如果我们想用普通的 "),a("code",[t._v("EnumTypeHandler")]),t._v("，就必须要显式地为那些 SQL 语句设置要使用的类型处理器。")]),t._v(" "),a("p",[t._v("（下一节才开始介绍映射器文件，如果你是首次阅读该文档，你可能需要先跳过这里，过会再来看。）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<!DOCTYPE mapper\n    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n\n<mapper namespace="org.apache.ibatis.submitted.rounding.Mapper">\n\t<resultMap type="org.apache.ibatis.submitted.rounding.User" id="usermap">\n\t\t<id column="id" property="id"/>\n\t\t<result column="name" property="name"/>\n\t\t<result column="funkyNumber" property="funkyNumber"/>\n\t\t<result column="roundingMode" property="roundingMode"/>\n\t</resultMap>\n\n\t<select id="getUser" resultMap="usermap">\n\t\tselect * from users\n\t</select>\n\t<insert id="insert">\n\t    insert into users (id, name, funkyNumber, roundingMode) values (\n\t    \t#{id}, #{name}, #{funkyNumber}, #{roundingMode}\n\t    )\n\t</insert>\n\n\t<resultMap type="org.apache.ibatis.submitted.rounding.User" id="usermap2">\n\t\t<id column="id" property="id"/>\n\t\t<result column="name" property="name"/>\n\t\t<result column="funkyNumber" property="funkyNumber"/>\n\t\t<result column="roundingMode" property="roundingMode" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>\n\t</resultMap>\n\t<select id="getUser2" resultMap="usermap2">\n\t\tselect * from users2\n\t</select>\n\t<insert id="insert2">\n\t    insert into users2 (id, name, funkyNumber, roundingMode) values (\n\t    \t#{id}, #{name}, #{funkyNumber}, #{roundingMode, typeHandler=org.apache.ibatis.type.EnumTypeHandler}\n\t    )\n\t</insert>\n\n</mapper>\n')])])]),a("p",[t._v("注意，这里的 select 语句强制使用 "),a("code",[t._v("resultMap")]),t._v(" 来代替 "),a("code",[t._v("resultType")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"对象工厂（objectfactory）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象工厂（objectfactory）"}},[t._v("#")]),t._v(" 对象工厂（objectFactory）")]),t._v(" "),a("p",[t._v("MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。 如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// ExampleObjectFactory.java\npublic class ExampleObjectFactory extends DefaultObjectFactory {\n  public Object create(Class type) {\n    return super.create(type);\n  }\n  public Object create(Class type, List<Class> constructorArgTypes, List<Object> constructorArgs) {\n    return super.create(type, constructorArgTypes, constructorArgs);\n  }\n  public void setProperties(Properties properties) {\n    super.setProperties(properties);\n  }\n  public <T> boolean isCollection(Class<T> type) {\n    return Collection.class.isAssignableFrom(type);\n  }}\n\x3c!-- mybatis-config.xml --\x3e\n<objectFactory type="org.mybatis.example.ExampleObjectFactory">\n  <property name="someProperty" value="100"/>\n</objectFactory>\n')])])]),a("p",[t._v("ObjectFactory 接口很简单，它包含两个创建用的方法，一个是处理默认构造方法的，另外一个是处理带参数的构造方法的。 最后，setProperties 方法可以被用来配置 ObjectFactory，在初始化你的 ObjectFactory 实例后， objectFactory 元素体中定义的属性会被传递给 setProperties 方法。")]),t._v(" "),a("h3",{attrs:{id:"插件（plugins）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件（plugins）"}},[t._v("#")]),t._v(" 插件（plugins）")]),t._v(" "),a("p",[t._v("MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：")]),t._v(" "),a("ul",[a("li",[t._v("Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)")]),t._v(" "),a("li",[t._v("ParameterHandler (getParameterObject, setParameters)")]),t._v(" "),a("li",[t._v("ResultSetHandler (handleResultSets, handleOutputParameters)")]),t._v(" "),a("li",[t._v("StatementHandler (prepare, parameterize, batch, update, query)")])]),t._v(" "),a("p",[t._v("这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为如果在试图修改或重写已有方法的行为的时候，你很可能在破坏 MyBatis 的核心模块。 这些都是更低层的类和方法，所以使用插件的时候要特别当心。")]),t._v(" "),a("p",[t._v("通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// ExamplePlugin.java\n@Intercepts({@Signature(\n  type= Executor.class,\n  method = "update",\n  args = {MappedStatement.class,Object.class})})\npublic class ExamplePlugin implements Interceptor {\n  private Properties properties = new Properties();\n  public Object intercept(Invocation invocation) throws Throwable {\n    // implement pre processing if need\n    Object returnObject = invocation.proceed();\n    // implement post processing if need\n    return returnObject;\n  }\n  public void setProperties(Properties properties) {\n    this.properties = properties;\n  }\n}\n\x3c!-- mybatis-config.xml --\x3e\n<plugins>\n  <plugin interceptor="org.mybatis.example.ExamplePlugin">\n    <property name="someProperty" value="100"/>\n  </plugin>\n</plugins>\n')])])]),a("p",[t._v("上面的插件将会拦截在 Executor 实例中所有的 “update” 方法调用， 这里的 Executor 是负责执行低层映射语句的内部对象。")]),t._v(" "),a("p",[a("strong",[t._v("提示")]),t._v(" "),a("strong",[t._v("覆盖配置类")])]),t._v(" "),a("p",[t._v("除了用插件来修改 MyBatis 核心行为之外，还可以通过完全覆盖配置类来达到目的。只需继承后覆盖其中的每个方法，再把它传递到 SqlSessionFactoryBuilder.build(myConfig) 方法即可。再次重申，这可能会严重影响 MyBatis 的行为，务请慎之又慎。")]),t._v(" "),a("h3",{attrs:{id:"环境配置（environments）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境配置（environments）"}},[t._v("#")]),t._v(" 环境配置（environments）")]),t._v(" "),a("p",[t._v("MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中 使用相同的 SQL 映射。有许多类似的使用场景。")]),t._v(" "),a("p",[a("strong",[t._v("不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。")])]),t._v(" "),a("p",[t._v("所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("每个数据库对应一个 SqlSessionFactory 实例")])])]),t._v(" "),a("p",[t._v("为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。可以接受环境配置的两个方法签名是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);\n")])])]),a("p",[t._v("如果忽略了环境参数，那么默认环境将会被加载，如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, properties);\n")])])]),a("p",[t._v("环境元素定义了如何配置环境。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<environments default="development">\n  <environment id="development">\n    <transactionManager type="JDBC">\n      <property name="..." value="..."/>\n    </transactionManager>\n    <dataSource type="POOLED">\n      <property name="driver" value="${driver}"/>\n      <property name="url" value="${url}"/>\n      <property name="username" value="${username}"/>\n      <property name="password" value="${password}"/>\n    </dataSource>\n  </environment>\n</environments>\n')])])]),a("p",[t._v("注意这里的关键点:")]),t._v(" "),a("ul",[a("li",[t._v('默认使用的环境 ID（比如：default="development"）。')]),t._v(" "),a("li",[t._v('每个 environment 元素定义的环境 ID（比如：id="development"）。')]),t._v(" "),a("li",[t._v('事务管理器的配置（比如：type="JDBC"）。')]),t._v(" "),a("li",[t._v('数据源的配置（比如：type="POOLED"）。')])]),t._v(" "),a("p",[t._v("默认的环境和环境 ID 是自解释的，因此一目了然。 你可以对环境随意命名，但一定要保证默认的环境 ID 要匹配其中一个环境 ID。")]),t._v(" "),a("p",[a("strong",[t._v("事务管理器（transactionManager）")])]),t._v(" "),a("p",[t._v("在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。")])]),t._v(" "),a("li",[a("p",[t._v("MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。例如:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<transactionManager type="MANAGED">\n  <property name="closeConnection" value="false"/>\n</transactionManager>\n')])])])])]),t._v(" "),a("p",[a("strong",[t._v("提示")]),t._v("如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。")]),t._v(" "),a("p",[t._v("这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以使用 TransactionFactory 接口的实现类的完全限定名或类型别名代替它们。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public interface TransactionFactory {\n  default void setProperties(Properties props) { // Since 3.5.2, change to default method\n    // NOP\n  }\n  Transaction newTransaction(Connection conn);\n  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);\n}\n")])])]),a("p",[t._v("任何在 XML 中配置的属性在实例化之后将会被传递给 setProperties() 方法。你也需要创建一个 Transaction 接口的实现类，这个接口也很简单：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public interface Transaction {\n  Connection getConnection() throws SQLException;\n  void commit() throws SQLException;\n  void rollback() throws SQLException;\n  void close() throws SQLException;\n  Integer getTimeout() throws SQLException;\n}\n")])])]),a("p",[t._v("使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。")]),t._v(" "),a("p",[a("strong",[t._v("数据源（dataSource）")])]),t._v(" "),a("p",[t._v("dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。")]),t._v(" "),a("ul",[a("li",[t._v("许多 MyBatis 的应用程序会按示例中的例子来配置数据源。虽然这是可选的，但为了使用延迟加载，数据源是必须配置的。")])]),t._v(" "),a("p",[t._v("有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：")]),t._v(" "),a("p",[a("strong",[t._v("UNPOOLED")]),t._v("– 这个数据源的实现只是每次被请求时打开和关闭连接。虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序来说，是一个很好的选择。 不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源具有以下属性。：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("driver")]),t._v(" – 这是 JDBC 驱动的 Java 类的完全限定名（并不是 JDBC 驱动中可能包含的数据源类）。")]),t._v(" "),a("li",[a("code",[t._v("url")]),t._v(" – 这是数据库的 JDBC URL 地址。")]),t._v(" "),a("li",[a("code",[t._v("username")]),t._v(" – 登录数据库的用户名。")]),t._v(" "),a("li",[a("code",[t._v("password")]),t._v(" – 登录数据库的密码。")]),t._v(" "),a("li",[a("code",[t._v("defaultTransactionIsolationLevel")]),t._v(" – 默认的连接事务隔离级别。")]),t._v(" "),a("li",[a("code",[t._v("defaultNetworkTimeout")]),t._v(" – The default network timeout value in milliseconds to wait for the database operation to complete. See the API documentation of "),a("code",[t._v("java.sql.Connection#setNetworkTimeout()")]),t._v(" for details.")])]),t._v(" "),a("p",[t._v("作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("driver.encoding=UTF8")])])]),t._v(" "),a("p",[t._v("这将通过 DriverManager.getConnection(url,driverProperties) 方法传递值为 "),a("code",[t._v("UTF8")]),t._v(" 的 "),a("code",[t._v("encoding")]),t._v(" 属性给数据库驱动。")]),t._v(" "),a("p",[a("strong",[t._v("POOLED")]),t._v("– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这是一种使得并发 Web 应用快速响应请求的流行处理方式。")]),t._v(" "),a("p",[t._v("除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("poolMaximumActiveConnections")]),t._v(" – 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值：10")]),t._v(" "),a("li",[a("code",[t._v("poolMaximumIdleConnections")]),t._v(" – 任意时间可能存在的空闲连接数。")]),t._v(" "),a("li",[a("code",[t._v("poolMaximumCheckoutTime")]),t._v(" – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）")]),t._v(" "),a("li",[a("code",[t._v("poolTimeToWait")]),t._v(" – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000 毫秒（即 20 秒）。")]),t._v(" "),a("li",[a("code",[t._v("poolMaximumLocalBadConnectionTolerance")]),t._v(" – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 "),a("code",[t._v("poolMaximumIdleConnections")]),t._v(" 与 "),a("code",[t._v("poolMaximumLocalBadConnectionTolerance")]),t._v(" 之和。 默认值：3 （新增于 3.4.5）")]),t._v(" "),a("li",[a("code",[t._v("poolPingQuery")]),t._v(" – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动失败时带有一个恰当的错误消息。")]),t._v(" "),a("li",[a("code",[t._v("poolPingEnabled")]),t._v(" – 是否启用侦测查询。若开启，需要设置 "),a("code",[t._v("poolPingQuery")]),t._v(" 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。")]),t._v(" "),a("li",[a("code",[t._v("poolPingConnectionsNotUsedFor")]),t._v(" – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。")])]),t._v(" "),a("p",[a("strong",[t._v("JNDI")]),t._v(" – 这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。这种数据源配置只需要两个属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("initial_context")]),t._v(" – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。")]),t._v(" "),a("li",[a("code",[t._v("data_source")]),t._v(" – 这是引用数据源实例位置的上下文的路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。")])]),t._v(" "),a("p",[t._v("和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给初始上下文。比如：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("env.encoding=UTF8")])])]),t._v(" "),a("p",[t._v("这就会在初始上下文（InitialContext）实例化时往它的构造方法传递值为 "),a("code",[t._v("UTF8")]),t._v(" 的 "),a("code",[t._v("encoding")]),t._v(" 属性。")]),t._v(" "),a("p",[t._v("你可以通过实现接口 "),a("code",[t._v("org.apache.ibatis.datasource.DataSourceFactory")]),t._v(" 来使用第三方数据源：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public interface DataSourceFactory {\n  void setProperties(Properties props);\n  DataSource getDataSource();\n}\n")])])]),a("p",[a("code",[t._v("org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory")]),t._v(" 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\n\npublic class C3P0DataSourceFactory extends UnpooledDataSourceFactory {\n\n  public C3P0DataSourceFactory() {\n    this.dataSource = new ComboPooledDataSource();\n  }\n}\n")])])]),a("p",[t._v("为了令其工作，记得为每个希望 MyBatis 调用的 setter 方法在配置文件中增加对应的属性。 下面是一个可以连接至 PostgreSQL 数据库的例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<dataSource type="org.myproject.C3P0DataSourceFactory">\n  <property name="driver" value="org.postgresql.Driver"/>\n  <property name="url" value="jdbc:postgresql:mydb"/>\n  <property name="username" value="postgres"/>\n  <property name="password" value="root"/>\n</dataSource>\n')])])]),a("h3",{attrs:{id:"数据库厂商标识（databaseidprovider）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库厂商标识（databaseidprovider）"}},[t._v("#")]),t._v(" 数据库厂商标识（databaseIdProvider）")]),t._v(" "),a("p",[t._v("MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 "),a("code",[t._v("databaseId")]),t._v(" 属性。 MyBatis 会加载不带 "),a("code",[t._v("databaseId")]),t._v(" 属性和带有匹配当前数据库 "),a("code",[t._v("databaseId")]),t._v(" 属性的所有语句。 如果同时找到带有 "),a("code",[t._v("databaseId")]),t._v(" 和不带 "),a("code",[t._v("databaseId")]),t._v(" 的相同语句，则后者会被舍弃。 为支持多厂商特性只要像下面这样在 mybatis-config.xml 文件中加入 "),a("code",[t._v("databaseIdProvider")]),t._v(" 即可：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<databaseIdProvider type="DB_VENDOR" />\n')])])]),a("p",[t._v("DB_VENDOR 对应的 databaseIdProvider 实现会将 databaseId 设置为 "),a("code",[t._v("DatabaseMetaData#getDatabaseProductName()")]),t._v(" 返回的字符串。 由于通常情况下这些字符串都非常长而且相同产品的不同版本会返回不同的值，所以你可能想通过设置属性别名来使其变短，如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<databaseIdProvider type="DB_VENDOR">\n  <property name="SQL Server" value="sqlserver"/>\n  <property name="DB2" value="db2"/>\n  <property name="Oracle" value="oracle" />\n</databaseIdProvider>\n')])])]),a("p",[t._v("在提供了属性别名时，DB_VENDOR 的 databaseIdProvider 实现会将 databaseId 设置为第一个数据库产品名与属性中的名称相匹配的值，如果没有匹配的属性将会设置为 “null”。 在这个例子中，如果 "),a("code",[t._v("getDatabaseProductName()")]),t._v(" 返回“Oracle (DataDirect)”，databaseId 将被设置为“oracle”。")]),t._v(" "),a("p",[t._v("你可以通过实现接口 "),a("code",[t._v("org.apache.ibatis.mapping.DatabaseIdProvider")]),t._v(" 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public interface DatabaseIdProvider {\n  default void setProperties(Properties p) { // Since 3.5.2, change to default method\n    // NOP\n  }\n  String getDatabaseId(DataSource dataSource) throws SQLException;\n}\n")])])]),a("h3",{attrs:{id:"映射器（mappers）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#映射器（mappers）"}},[t._v("#")]),t._v(" 映射器（mappers）")]),t._v(" "),a("p",[t._v("既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要定义 SQL 映射语句了。 但是首先我们需要告诉 MyBatis 到哪里去找到这些语句。 Java 在自动查找这方面没有提供一个很好的方法，所以最佳的方式是告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 "),a("code",[t._v("file:///")]),t._v(" 的 URL），或类名和包名等。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\x3c!-- 使用相对于类路径的资源引用 --\x3e\n<mappers>\n  <mapper resource="org/mybatis/builder/AuthorMapper.xml"/>\n  <mapper resource="org/mybatis/builder/BlogMapper.xml"/>\n  <mapper resource="org/mybatis/builder/PostMapper.xml"/>\n</mappers>\n\x3c!-- 使用完全限定资源定位符（URL） --\x3e\n<mappers>\n  <mapper url="file:///var/mappers/AuthorMapper.xml"/>\n  <mapper url="file:///var/mappers/BlogMapper.xml"/>\n  <mapper url="file:///var/mappers/PostMapper.xml"/>\n</mappers>\n\x3c!-- 使用映射器接口实现类的完全限定类名 --\x3e\n<mappers>\n  <mapper class="org.mybatis.builder.AuthorMapper"/>\n  <mapper class="org.mybatis.builder.BlogMapper"/>\n  <mapper class="org.mybatis.builder.PostMapper"/>\n</mappers>\n\x3c!-- 将包内的映射器接口实现全部注册为映射器 --\x3e\n<mappers>\n  <package name="org.mybatis.builder"/>\n</mappers>\n')])])]),a("p",[t._v("这些配置会告诉了 MyBatis 去哪里找映射文件，剩下的细节就应该是每个 SQL 映射文件了，也就是接下来我们要讨论的。")])])}),[],!1,null,null,null);e.default=n.exports}}]);