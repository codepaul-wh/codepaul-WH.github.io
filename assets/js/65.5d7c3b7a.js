(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{395:function(s,e,t){"use strict";t.r(e);var r=t(26),a=Object(r.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"redis-数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-数据类型"}},[s._v("#")]),s._v(" Redis 数据类型")]),s._v(" "),t("p",[s._v("Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"string（字符串）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string（字符串）"}},[s._v("#")]),s._v(" String（字符串）")]),s._v(" "),t("p",[s._v("string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。")]),s._v(" "),t("p",[s._v("string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。")]),s._v(" "),t("p",[s._v("string类型是Redis最基本的数据类型，一个键最大能存储512MB。")]),s._v(" "),t("h3",{attrs:{id:"实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[s._v("#")]),s._v(" 实例")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('redis 127.0.0.1:6379> SET name "redis.net.cn"\nOK\nredis 127.0.0.1:6379> GET name\n"redis.net.cn"\n')])])]),t("p",[s._v("在以上实例中我们使用了 Redis 的 "),t("strong",[s._v("SET")]),s._v(" 和 "),t("strong",[s._v("GET")]),s._v(" 命令。键为 name，对应的值为redis.net.cn。")]),s._v(" "),t("p",[s._v("**注意：**一个键最大能存储512MB。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"hash（哈希）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash（哈希）"}},[s._v("#")]),s._v(" Hash（哈希）")]),s._v(" "),t("p",[s._v("Redis hash 是一个键值对集合。")]),s._v(" "),t("p",[s._v("Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。")]),s._v(" "),t("h3",{attrs:{id:"实例-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-2"}},[s._v("#")]),s._v(" 实例")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('redis 127.0.0.1:6379> HMSET user:1 username redis.net.cn password redis.net.cn points 200\nOK\nredis 127.0.0.1:6379> HGETALL user:1\n1) "username"\n2) "redis.net.cn"\n3) "password"\n4) "redis.net.cn"\n5) "points"\n6) "200"\nredis 127.0.0.1:6379>\n')])])]),t("p",[s._v("以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis "),t("strong",[s._v("HMSET, HEGTALL")]),s._v(" 命令，"),t("strong",[s._v("user:1")]),s._v(" 为键值。")]),s._v(" "),t("p",[s._v("每个 hash 可以存储 232 - 1 键值对（40多亿）。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"list（列表）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list（列表）"}},[s._v("#")]),s._v(" List（列表）")]),s._v(" "),t("p",[s._v("Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。")]),s._v(" "),t("h3",{attrs:{id:"实例-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-3"}},[s._v("#")]),s._v(" 实例")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('redis 127.0.0.1:6379> lpush redis.net.cn redis\n(integer) 1\nredis 127.0.0.1:6379> lpush redis.net.cn mongodb\n(integer) 2\nredis 127.0.0.1:6379> lpush redis.net.cn rabitmq\n(integer) 3\nredis 127.0.0.1:6379> lrange redis.net.cn 0 10\n1) "rabitmq"\n2) "mongodb"\n3) "redis"\nredis 127.0.0.1:6379>\n')])])]),t("p",[s._v("列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"set（集合）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set（集合）"}},[s._v("#")]),s._v(" Set（集合）")]),s._v(" "),t("p",[s._v("Redis的Set是string类型的无序集合。")]),s._v(" "),t("p",[s._v("集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。")]),s._v(" "),t("h3",{attrs:{id:"sadd-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sadd-命令"}},[s._v("#")]),s._v(" sadd 命令")]),s._v(" "),t("p",[s._v("添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("sadd key member\n")])])]),t("h3",{attrs:{id:"实例-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-4"}},[s._v("#")]),s._v(" 实例")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('redis 127.0.0.1:6379> sadd redis.net.cn redis\n(integer) 1\nredis 127.0.0.1:6379> sadd redis.net.cn mongodb\n(integer) 1\nredis 127.0.0.1:6379> sadd redis.net.cn rabitmq\n(integer) 1\nredis 127.0.0.1:6379> sadd redis.net.cn rabitmq\n(integer) 0\nredis 127.0.0.1:6379> smembers redis.net.cn\n \n1) "rabitmq"\n2) "mongodb"\n3) "redis"\n')])])]),t("p",[s._v("**注意：**以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。")]),s._v(" "),t("p",[s._v("集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"zset-sorted-set：有序集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zset-sorted-set：有序集合"}},[s._v("#")]),s._v(" zset(sorted set：有序集合)")]),s._v(" "),t("p",[s._v("Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。")]),s._v(" "),t("p",[s._v("不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。")]),s._v(" "),t("p",[s._v("zset的成员是唯一的,但分数(score)却可以重复。")]),s._v(" "),t("h3",{attrs:{id:"zadd-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zadd-命令"}},[s._v("#")]),s._v(" zadd 命令")]),s._v(" "),t("p",[s._v("添加元素到集合，元素在集合中存在则更新对应score")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("zadd key score member \n")])])]),t("h3",{attrs:{id:"实例-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-5"}},[s._v("#")]),s._v(" 实例")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('redis 127.0.0.1:6379> zadd redis.net.cn 0 redis\n(integer) 1\nredis 127.0.0.1:6379> zadd redis.net.cn 0 mongodb\n(integer) 1\nredis 127.0.0.1:6379> zadd redis.net.cn 0 rabitmq\n(integer) 1\nredis 127.0.0.1:6379> zadd redis.net.cn 0 rabitmq\n(integer) 0\nredis 127.0.0.1:6379> ZRANGEBYSCORE redis.net.cn 0 1000\n \n1) "redis"\n2) "mongodb"\n3) "rabitmq"\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);